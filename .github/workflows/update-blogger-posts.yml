name: Get Blogger Posts Filtered
on:
  schedule:
    - cron: '0 8 * * *'  # Cada d√≠a a las 8:00 AM UTC
  workflow_dispatch:       # Ejecuci√≥n manual

jobs:
  get-blogger-posts:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create data directory
      run: mkdir -p data

    - name: Get and filter Blogger posts
      run: |
        echo "üìñ Obteniendo y filtrando posts de Blogger..."
        
        # URL de la API
        URL="https://www.googleapis.com/blogger/v3/blogs/$BLOG_ID/posts?key=$API_KEY&maxResults=20"
        
        # Obtener datos crudos
        curl -s "$URL" -o data/raw-posts.json
        
        # Procesar y filtrar solo los datos que necesitas
        jq '{
          last_updated: (now | strftime("%Y-%m-%dT%H:%M:%SZ")),
          total_posts: (.items | length),
          posts: [.items[] | {
            title: .title,
            url: .url,
            image: (.content | capture("<img[^>]+src=\"([^\">]+)\"") | .capture // null),
            categories: (.labels // []),
            published: .published,
            updated: .updated
          }]
        }' data/raw-posts.json > data/blog-posts-filtered.json
        
        echo "‚úÖ Datos filtrados guardados en blog-posts-filtered.json"
        echo "üìä N√∫mero de posts procesados: $(jq '.total_posts' data/blog-posts-filtered.json)"

    - name: Show sample data
      run: |
        echo "üéØ Muestra del primer post:"
        jq '.posts[0]' data/blog-posts-filtered.json

    - name: Commit and push
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@users.noreply.github.com"
        git add data/blog-posts-filtered.json
        git commit -m "üìù Posts filtrados actualizados - $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
        git push
      env:
        API_KEY: ${{ secrets.BLOGGER_API_KEY }}
        BLOG_ID: ${{ vars.BLOGGER_BLOG_ID }}
