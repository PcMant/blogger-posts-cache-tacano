name: Get Blogger Posts
on:
  workflow_dispatch:

jobs:
  get-blogger-posts:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create data directory
      run: mkdir -p data

    - name: Get Blogger data
      run: |
        echo "üì¶ Obteniendo datos de Blogger..."
        curl -s "https://www.googleapis.com/blogger/v3/blogs/$BLOG_ID/posts?key=$API_KEY&maxResults=20" \
          -o data/raw_response.json
        echo "‚úÖ Datos guardados"

    - name: DEBUG - See what we got
      run: |
        echo "üîç VIENDO lo que recibimos:"
        echo "Tama√±o del archivo: $(wc -c < data/raw_response.json) bytes"
        echo "¬øTiene 'items'? $(jq 'has("items")' data/raw_response.json)"
        echo "N√∫mero de items: $(jq '.items | length' data/raw_response.json)"
        echo "--- PRIMER ITEM ---"
        jq '.items[0] | {title: .title, url: .url}' data/raw_response.json

    - name: Process data THE RIGHT WAY
      run: |
        echo "üõ†Ô∏è Procesando datos CORRECTAMENTE..."
        
        # M√©todo INFALIBLE - sin pipes complejos
        # 1. Crear archivo con timestamp
        echo '{"last_updated": "'$(date -Is)'"}' > data/blog-posts.json
        
        # 2. Extraer items y agregarlos al JSON
        if jq -e '.items' data/raw_response.json > /dev/null; then
          jq '.items | map({
            title: .title,
            url: .url,
            categories: (.labels // []),
            published: .published,
            updated: .updated
          })' data/raw_response.json > data/items_array.json
          
          # 3. Combinar con el timestamp
          jq --slurpfile items data/items_array.json '.posts = $items[0]' data/blog-posts.json > data/final.json
          mv data/final.json data/blog-posts.json
          rm data/items_array.json
        else
          # Si no hay items, agregar array vac√≠o
          jq '.posts = []' data/blog-posts.json > data/final.json
          mv data/final.json data/blog-posts.json
        fi
        
        echo "‚úÖ Procesamiento completado"

    - name: Verify result
      run: |
        echo "üéØ RESULTADO FINAL:"
        echo "N√∫mero de posts: $(jq '.posts | length' data/blog-posts.json)"
        jq '.' data/blog-posts.json

    - name: Commit and push
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add data/blog-posts.json
        git commit -m "üìù Blog posts updated - $(date +'%Y-%m-%d %H:%M')"
        git push
      env:
        API_KEY: ${{ secrets.BLOGGER_API_KEY }}
        BLOG_ID: ${{ vars.BLOGGER_BLOG_ID }}
